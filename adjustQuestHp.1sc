//------------------------------------------------
//--- 010 Editor v12.0.1 Script File
//
//      File: NormalQuestDataForEnemy.user.2
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
//   History: 
//------------------------------------------------
// RSZFile[0] = snow.quest.NormalQuestData
// RSZ[i] for i > 0; = snow.quest.NormalQuestData.Param[i]
// var[0] = Int _QuestNo[0]

//Printf("%d", RSZFile[0].Data.RawData.RSZ[1].var[0].data);
//Printf("%d\n", RSZFile[0].InstanceInfos.instanceInfo[RSZFile[0].ObjectTable[0]].CombinedKey);
//Printf("%d\n", RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[0].Count);

//RSZ Parser By Darkness:
#link "RSZParser.dll"
ubyte   IsInitialized();
void    ParseJson(string jsonPath);
string  GetRSZClassName(uint32 classHash);
uint32  GetFieldCount(uint32 classHash);
uint32  GetFieldAlignment(uint32 classHash, uint32 fieldIndex);
ubyte   GetFieldArrayState(uint32 classHash, uint32 fieldIndex);
string  GetFieldName(uint32 classHash, uint32 fieldIndex);
string  GetFieldTypeName(uint32 classHash, uint32 fieldIndex);
string  GetFieldOrgTypeName(uint32 classHash, uint32 fieldIndex);
uint32  GetFieldSize(uint32 classHash, uint32 fieldIndex);
uint64  GetFieldType(uint32 classHash, uint32 fieldIndex);
ubyte   IsFieldNative(uint32 classHash, uint32 fieldIndex);
#endlink

void adjust_quest_hp() {
	local int questCount = RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[0].Count;
	local int i=1;
	local int j = 0;
	for (i = 1; i <= questCount; i++){
		for (j = 0; j < 7; j++){
			
			RSZFile[0].Data.RawData.RSZ[i].var[10].var[j].data -= RSZFile[0].Data.RawData.RSZ[i].var[17].var[j].data;
			RSZFile[0].Data.RawData.RSZ[i].var[17].var[j].data = 0;
			//Printf("%d-", RSZFile[0].Data.RawData.RSZ[i].var[10].var[j].data); //_VitalTbl[10] for boss 1
			//Printf("%d, ", RSZFile[0].Data.RawData.RSZ[i].var[17].var[j].data); //_Difficulty[17] for boss 1 
		}
		//Printf("\n");
	}
}

void mon_size(int size_intent) {
	local int size_Tbl_count = RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[0].Count;
	local int i = 0;
	local int j = 0;
	local int k = 0;
	local int RandomScaleTableData_Object_index = 0;
	local int _ScaleAndRateData_Count = 0;
	local int _ScaleAndRateData_Object_index = 0;
	local float _ScaleAndRateData_Min_in_set = 0;
	local float _ScaleAndRateData_Max_in_set = 0;
	local float _ScaleAndRateData_Mid_in_set = 0;
	local float _ScaleAndRateData_Min_in_set_index = 0;
	local float _ScaleAndRateData_Max_in_set_index = 0;
	local float _ScaleAndRateData_Mid_in_set_index = 0;
	local float target_size = 0;
	for (i = 0; i < size_Tbl_count; i++){ //for each size-table
		//Printf("%d", RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[0].var[i].ObjectIndex); //size-table object index
		RandomScaleTableData_Object_index = RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[0].var[i].ObjectIndex; //size-table object index
		//Printf("%d", RSZFile[0].Data.RawData.RSZ[RandomScaleTableData_Object_index].var[0].data); //Int _Type[0] //size-table type
		_ScaleAndRateData_Count = RSZFile[0].Data.RawData.RSZ[RandomScaleTableData_Object_index].var[1].Count; // size in size-table count
		_ScaleAndRateData_Min_in_set_index = RSZFile[0].Data.RawData.RSZ[RandomScaleTableData_Object_index].var[1].var[0].ObjectIndex;
		_ScaleAndRateData_Mid_in_set_index = RSZFile[0].Data.RawData.RSZ[RandomScaleTableData_Object_index].var[1].var[(int)(_ScaleAndRateData_Count/2)].ObjectIndex;
		_ScaleAndRateData_Max_in_set_index = RSZFile[0].Data.RawData.RSZ[RandomScaleTableData_Object_index].var[1].var[_ScaleAndRateData_Count-1].ObjectIndex;
		
		// scaning //
		for (j = 0; j < _ScaleAndRateData_Count; j++){ //for each size in siez-table
			_ScaleAndRateData_Object_index = RSZFile[0].Data.RawData.RSZ[RandomScaleTableData_Object_index].var[1].var[j].ObjectIndex; //size object index
			//Printf("%d-",_ScaleAndRateData_Object_index); //show size object index
			//Printf("%g",RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[0].data); //show size object's scale
			//Printf("(%d)-",RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[1].data); //show size object's lot rate
            if (RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[1].data < 1) {
                Printf("There has non-standard rate in object[%d]\n", _ScaleAndRateData_Object_index);
				return;
            }
			if (RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Mid_in_set_index].var[1].data < RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[1].data){ //take max lot rate as mid
				_ScaleAndRateData_Mid_in_set_index = _ScaleAndRateData_Object_index;
			}
		}
		_ScaleAndRateData_Min_in_set = RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Min_in_set_index].var[0].data; //min size in current size table 
		_ScaleAndRateData_Mid_in_set = RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Mid_in_set_index].var[0].data; //mid size in current size table
		_ScaleAndRateData_Max_in_set = RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Max_in_set_index].var[0].data; //max size in current size table
		//Printf("%g-%g-%g",_ScaleAndRateData_Min_in_set,_ScaleAndRateData_Mid_in_set,_ScaleAndRateData_Max_in_set); //show min mid max scale
		
		// actual modification //
		switch (size_intent){
			case 0 : target_size = _ScaleAndRateData_Min_in_set; break;
			case 1 : target_size = _ScaleAndRateData_Mid_in_set; break;
			case 2 : target_size = _ScaleAndRateData_Max_in_set; break;
		}
			
		for (j = 0; j < _ScaleAndRateData_Count; j++){ //for each size in siez-table
			_ScaleAndRateData_Object_index = RSZFile[0].Data.RawData.RSZ[RandomScaleTableData_Object_index].var[1].var[j].ObjectIndex; //size object index
			
			if (target_size == RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[0].data){ //if match target scale
				RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[1].data = 100;
				
			}else{
				RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[1].data = 0;
			}
			Printf("%g",RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[0].data); //show size object's scale
			Printf("(%d)-",RSZFile[0].Data.RawData.RSZ[_ScaleAndRateData_Object_index].var[1].data); //show size object's lot rate
			
		}

		Printf("\n");
	}
}

void mon_spond(int area) {
	local int _StageInfoList_Count = RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[1].Count;
	local int _SetInfoList_Count = 0;
	local int Info_Count = 0;
	local int i = 0;
	local int j = 0;
	local int k = 0;
	local int _StageInfoList_cur_obj_idx = 0;
	local int _SetInfoList_cur_obj_idx = 0;
	local int Info_cur_obj_idx = 0;
	local int Lot = 0;
	local int Block = 0;
	local int _id = 0;
	local int Info1 = 0;
	local int Info2 = 0;
	local int Info3 = 0;
	
	//Printf("_EnemyType: %d\n", RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[0].data); // by snow.enemy.EnemyBossInitSetData
	for (i = 0; i < _StageInfoList_Count; i++){ //for each StageInfoList
		_StageInfoList_cur_obj_idx = RSZFile[0].Data.RawData.RSZ[RSZFile[0].ObjectTable[0]].var[1].var[i].ObjectIndex;
		//Printf("%d", _StageInfoList_cur_obj_idx);
		
		//Printf("    _MapType: %d\n", RSZFile[0].Data.RawData.RSZ[_StageInfoList_cur_obj_idx].var[0].data); // by snow.enemy.EnemyBossInitSetData.StageInfo
		_SetInfoList_Count = RSZFile[0].Data.RawData.RSZ[_StageInfoList_cur_obj_idx].var[1].Count;
		for (j = 0; j < _SetInfoList_Count; j++){ //for each SetInfoList
			_SetInfoList_cur_obj_idx = RSZFile[0].Data.RawData.RSZ[_StageInfoList_cur_obj_idx].var[1].var[j].ObjectIndex;
			//Printf("%d", _SetInfoList_cur_obj_idx);
			
			//Printf("        _SetName: %s\n", RSZFile[0].Data.RawData.RSZ[_SetInfoList_cur_obj_idx].var[0].data);
			Info_Count = RSZFile[0].Data.RawData.RSZ[_SetInfoList_cur_obj_idx].var[1].Count;

			if (Info_Count != 3){
				Printf("UnExpected info size at object :%d\n",_SetInfoList_cur_obj_idx);
				return;
			}else{
				Info1 = RSZFile[0].Data.RawData.RSZ[_SetInfoList_cur_obj_idx].var[1].var[0].ObjectIndex;
				Info2 = RSZFile[0].Data.RawData.RSZ[_SetInfoList_cur_obj_idx].var[1].var[1].ObjectIndex;
				Info3 = RSZFile[0].Data.RawData.RSZ[_SetInfoList_cur_obj_idx].var[1].var[2].ObjectIndex;
				switch (area) {
					case 0 : if (RSZFile[0].Data.RawData.RSZ[Info1].var[0].data > 0){
						RSZFile[0].Data.RawData.RSZ[Info1].var[0].data = 100;
						RSZFile[0].Data.RawData.RSZ[Info2].var[0].data = 0;
						RSZFile[0].Data.RawData.RSZ[Info3].var[0].data = 0;
					} break;
					case 1 : if (RSZFile[0].Data.RawData.RSZ[Info2].var[0].data > 0){
						RSZFile[0].Data.RawData.RSZ[Info1].var[0].data = 0;
						RSZFile[0].Data.RawData.RSZ[Info2].var[0].data = 100;
						RSZFile[0].Data.RawData.RSZ[Info3].var[0].data = 0;
					} break;
					case 2 : if (RSZFile[0].Data.RawData.RSZ[Info3].var[0].data > 0){
						RSZFile[0].Data.RawData.RSZ[Info1].var[0].data = 0;
						RSZFile[0].Data.RawData.RSZ[Info2].var[0].data = 0;
						RSZFile[0].Data.RawData.RSZ[Info3].var[0].data = 100;
					} break;
				}
			}/*
			for (k = 0; k < Info_Count; k++){ //for each SetInfoList
				Info_cur_obj_idx = RSZFile[0].Data.RawData.RSZ[_SetInfoList_cur_obj_idx].var[1].var[k].ObjectIndex;
				//Printf("%d", Info_cur_obj_idx);
				
				Lot = RSZFile[0].Data.RawData.RSZ[Info_cur_obj_idx].var[0].data;
				Block = RSZFile[0].Data.RawData.RSZ[Info_cur_obj_idx].var[1].data;
				_id = RSZFile[0].Data.RawData.RSZ[Info_cur_obj_idx].var[2].data;
				Printf("            %d, %d, %d\n", Lot, Block, _id);
			}*/
			
			
		}
	}
}


void questRead() {
    local int baseClass_obj_idx = RSZFile[0].ObjectTable[0]; //object index of base List containing all data
	local int DataCount = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].Count; //var[0] = first fleid
	local int DataItem_obj_idx = 0; // object index of item in base List for looping
	local int DataItem_field = 0; // temp var for looping
	local int i = 0;
	local int j = 0;
	local int k = 0;

    local int QuestType = 0;
    local int QuestLv = 0;
    local int EnemyLv = 0;
    local int MapNo = 0;
    local int TargetType = 0;
    local int TgtEmType_0 = 0;
    local int BossEmType = 0;
    Printf("items count in base list: %d\n", DataCount);
	for (i = 0; i < DataCount; i++){ // for each item in base List
		DataItem_obj_idx = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].var[i].ObjectIndex;
		//Printf("%d\n", DataItem_obj_idx); // object index
        DataItem_field = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[0].data; // QuestNo // var[0]
        Printf("%05d-", DataItem_field);
        QuestType = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[1].data;
        Printf("%03d-", QuestType); // QuestType = 1 for HUNTING
        //QuestLv = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data;
        //Printf("%d\n", QuestLv); // QuestLv > 2 for Hall HighLv(3~7)
        EnemyLv = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[3].data;
        Printf("%d-", EnemyLv); // EnemyLv = 2 for High rank
        MapNo = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[4].data;
        Printf("%02d  ", MapNo); // MapNo
        //TargetType = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[10].data;
        //Printf("%02d\n", TargetType); // TargetType = 2 for Hunting
        //TgtEmType_0 = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[11].var[0].data;
        //Printf("%02d\n", TgtEmType_0); // TargetType = 2 for Hunting
        BossEmType = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[14].var[0].data;
        Printf("em%03d-%02d\n", BossEmType<<24>>24, BossEmType>>8); // BossEmType
	}

}


void subspawn(int target) {
    local int baseClass_obj_idx = RSZFile[0].ObjectTable[0]; //object index of base List containing all data
	local int DataCount = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[1].Count; //var[0] = first fleid
	local int DataItem_obj_idx = 0; // object index of item in base List for looping
	local int DataItem_field = 0; // temp var for looping
	local int i = 0;
	local int j = 0;
	local int k = 0;

    local int areaCount[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    local int uniID[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    local float angle[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    local struct {
       float vec3[3] = {0,0,0};
    } targetPos[18];

    local int _BlockNo = 0;
    local int  _UniqueID = 0;
    local float _Radius = 0;
    local int _PosType = 0;
    local float _Angle = 0;

    Printf("items count in base list: %d\n", DataCount);
	Printf("Map: %d\n", RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].data); //var[0] = first fleid); 

    // get value
	for (i = 0; i < DataCount; i++){ // for each item in base List
		DataItem_obj_idx = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[1].var[i].ObjectIndex;
		//Printf("%d\n", DataItem_obj_idx); // object index
        _BlockNo = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[0].data; // QuestNo // var[0]
        Printf("%d-", _BlockNo);
        _UniqueID = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[1].data; // QuestNo // var[0]
        Printf("%d-", _UniqueID);
        _Radius = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[4].data; // QuestNo // var[0]
        Printf("%g-", _Radius);
        _PosType = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[5].data; // QuestNo // var[0]
        Printf("%d-", _PosType);
        _Angle = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[6].data; // QuestNo // var[0]
        Printf("%g-\n", _Angle);
        areaCount[_BlockNo] += 1;
        if (areaCount[_BlockNo] == target) {
            targetPos[_BlockNo].vec3[0] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[0];
            targetPos[_BlockNo].vec3[1] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[1];
            targetPos[_BlockNo].vec3[2] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[2];
            uniID[_BlockNo] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[1].data; // QuestNo // var[0]
            angle[_BlockNo] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[6].data; // QuestNo // var[0]
        }
	}
    for (i = 0; i < 18; i++){ // show data
        Printf("area-%d = %d, pos = (%g,%g,%g)\n", i, areaCount[i], targetPos[i].vec3[0], targetPos[i].vec3[1], targetPos[i].vec3[2]);
    }

    //apply change
	for (i = 0; i < DataCount; i++){ // for each item in base List
		DataItem_obj_idx = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[1].var[i].ObjectIndex;
		//Printf("%d\n", DataItem_obj_idx); // object index
        _BlockNo = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[0].data; // QuestNo // var[0]
        //Printf("%d\n", _BlockNo);
        if (areaCount[_BlockNo] >= target) { //actually use to check 4th only, if its 4th, leave others random
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[0] = targetPos[_BlockNo].vec3[0];
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[1] = targetPos[_BlockNo].vec3[1];
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[2] = targetPos[_BlockNo].vec3[2];
            //RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[1].data = uniID[_BlockNo];
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[6].data = angle[_BlockNo];
        }
	}

}

void subspawn2(int target) {
    local int baseClass_obj_idx = RSZFile[0].ObjectTable[0]; //object index of base List containing all data
	local int DataCount = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[1].Count; //var[0] = first fleid
	local int DataItem_obj_idx = 0; // object index of item in base List for looping
	local int DataItem_field = 0; // temp var for looping
	local int i = 0;
	local int j = 0;
	local int k = 0;

    local int areaCount[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    local int uniID[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    local float angle[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    local struct {
       float vec3[3] = {0,0,0};
    } targetPos[18];

    local int _BlockNo = 0;
    local int  _UniqueID = 0;
    local float _Radius = 0;
    local int _PosType = 0;
    local float _Angle = 0;

    Printf("items count in base list: %d\n", DataCount);
	Printf("Map: %d\n", RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].data); //var[0] = first fleid); 

    // get value
	for (i = 0; i < DataCount; i++){ // for each item in base List
		DataItem_obj_idx = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[1].var[i].ObjectIndex;
		//Printf("%d\n", DataItem_obj_idx); // object index
        _BlockNo = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[0].data; // QuestNo // var[0]
        Printf("%d-", _BlockNo);
        _UniqueID = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[1].data; // QuestNo // var[0]
        Printf("%d-", _UniqueID);
        _Radius = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[4].data; // QuestNo // var[0]
        Printf("%g-", _Radius);
        _PosType = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[5].data; // QuestNo // var[0]
        Printf("%d-", _PosType);
        _Angle = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[6].data; // QuestNo // var[0]
        Printf("%g-\n", _Angle);
        areaCount[_BlockNo] += 1;
        if (areaCount[_BlockNo] == target) {
            targetPos[_BlockNo].vec3[0] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[0];
            targetPos[_BlockNo].vec3[1] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[1];
            targetPos[_BlockNo].vec3[2] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[2];
            uniID[_BlockNo] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[1].data; // QuestNo // var[0]
            angle[_BlockNo] = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[6].data; // QuestNo // var[0]
        }
	}
    for (i = 0; i < 18; i++){ // show data
        Printf("area-%d = %d, pos = (%g,%g,%g)\n", i, areaCount[i], targetPos[i].vec3[0], targetPos[i].vec3[1], targetPos[i].vec3[2]);
    }

    //apply change
	for (i = 0; i < DataCount; i++){ // for each item in base List
		DataItem_obj_idx = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[1].var[i].ObjectIndex;
		//Printf("%d\n", DataItem_obj_idx); // object index
        _BlockNo = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[0].data; // QuestNo // var[0]
        //Printf("%d\n", _BlockNo);
        if (areaCount[_BlockNo] >= target) { //actually use to check 4th only, if its 4th, leave others random
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[0] = targetPos[_BlockNo].vec3[0];
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[1] = targetPos[_BlockNo].vec3[1];
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[2].data[2] = targetPos[_BlockNo].vec3[2];
            //RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[1].data = uniID[_BlockNo];
            RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[6].data = angle[_BlockNo];
        }
	}

}

//questRead();

int curFile;//GetFileNum();
int newFile;// = FileNew();
int fileCnt = FileCount();

void runTemplate(){
    FileSelect( curFile );
    RunTemplate( "RE_RSZ.bt" );
}

void runBatchFunction(){
    FileSelect( curFile );
    
    //to lowest possible hp
    //adjust_quest_hp()
    
    //0 = min, 1 = mid, 2 = max
    //system_boss_random_scale_data.user.2
    //mon_size(1);
    
    //0 = 1st area, 1 = 2nd area, 2 = 3rd area
    //mon_spond(2);

    //1 = 1st occr of subspawn
    subspawn(4);
}

void loopAllFile(){
    for (curFile=0; curFile<12; curFile++){
        //curFile = GetFileNum();
        //runTemplate();
        //runBatchFunction();
    }
}
//loopAllFile();
curFile = GetFileNum();
//runBatchFunction();
char ToGrade(int value){
	switch(value){
		case 0: return 'C';
		case 1: return 'B';
		case 2: return 'A';
		case 3: return 'S';
		default: return ' ';
	}

}
void ReadslotData() { //slot num read
    local int baseClass_obj_idx = RSZFile[0].ObjectTable[0]; //object index of base List containing all data
	local int DataCount = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].Count; //var[0] = first fleid
	local int DataItem_obj_idx = 0; // object index of item in base List for looping
	local int DataItem_field = 0; // temp var for looping
	local int i = 0;
	local int j = 0;
	local int k = 0;

    local int SlotNumCount = 0;
	local int Slot_obj_idx = 0; // object index of item in Slot_obj List for looping
	local int _Skill1Grade = 0; // object index of item in Slot_obj List for looping
	local int _Skill2Grade = 0; // object index of item in Slot_obj List for looping
    local int pListCount = 0;
    local int pListVarIndex = 2;
	local int pListItem = 0;
    Printf("items count in base list: %d\n", DataCount);
	for (i = 0; i < DataCount; i++){ // for each item in base List
		DataItem_obj_idx = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].var[i].ObjectIndex;
		//Printf("%d\n", DataItem_obj_idx); // object index
        SlotNumCount = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[0].Count; // SlotNumListObjectCount // var[0]
        Printf("SlotParam[%d]\n", i);
	    for (j = 0; j < SlotNumCount; j++){ // for each item in List
            Slot_obj_idx = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[0].var[j].ObjectIndex;
            Printf("SlotNumTable[%d] | ", j);
            _Skill1Grade = RSZFile[0].Data.RawData.RSZ[Slot_obj_idx].var[0].data;
            Printf("%s | ", ToGrade(_Skill1Grade));
            _Skill2Grade = RSZFile[0].Data.RawData.RSZ[Slot_obj_idx].var[1].data;
            Printf("%s", ToGrade(_Skill2Grade));
            for (pListVarIndex = 2; pListVarIndex <= 8; pListVarIndex++){
                pListCount = RSZFile[0].Data.RawData.RSZ[Slot_obj_idx].var[pListVarIndex].Count; //pList
                Printf(" | [");
                for (k=0; k<pListCount; k++){
                    pListItem = RSZFile[0].Data.RawData.RSZ[Slot_obj_idx].var[pListVarIndex].var[k].data; //prob
                    if (k==0)
                        Printf("%3d", pListItem);
                    else
                        Printf(",%3d", pListItem);
                }
                Printf("]");
            }
            Printf("\n");
        }
	}

}

uint32 hash_8(string key){
    local uint64 it<hidden=true>;
    local const uint length = Strlen(key);
    local uint32 mmhVal = 0;
    if (length) {
        local byte key_array[length];
        for(it = 0; it < length; it += 1){
            key_array[it] = key[it];
        }
        mmhVal = mmh3(key_array, length, 0xFFFFFFFF);
        Printf("%08Xh\n",mmhVal);
        return mmhVal;
    } return 0;
}

void ReadData() { //bulletParamData

    uint32 ListClassHash = RSZFile[0].InstanceInfos.instanceInfo[1].typeId.Hash;
    Printf("%08Xh "+GetRSZClassName(ListClassHash)+"\n",ListClassHash);

    local int baseClass_obj_idx = RSZFile[0].ObjectTable[0]; //object index of base List containing all data
	local int DataCount = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].Count; //var[0] = first fleid
	local int DataItem_obj_idx = 0; // object index of item in base List for looping

	local int i = 0;
	local int j = 0;
	local int k = 0;
    local string s="";
    local string ss="";
    local string sss="";

    local int isList = 0;
    local int ListCount = 0;

    local int fieldCount = GetFieldCount(ListClassHash);
    local int isListEveryField[fieldCount];
    local int isStringEveryField[fieldCount];

    Printf("items count in base list: %d\n", DataCount);
    
    s="";
    for (j=0; j<fieldCount; j++){
        s += GetFieldName(ListClassHash, j)+"|";
        isListEveryField[j] = GetFieldArrayState(ListClassHash, j);
        if (GetFieldType(ListClassHash, j) == String_tid)
            isStringEveryField[j] = true;
        else
            isStringEveryField[j] = false;
    }
    s = SubStr(s,0,Strlen(s)-1);
    Printf(s+"\n");

	for (i = 0; i < DataCount; i++){ // for each item in base List
		DataItem_obj_idx = RSZFile[0].Data.RawData.RSZ[baseClass_obj_idx].var[0].var[i].ObjectIndex;
        
        s="";
        for (j=0; j<fieldCount; j++){
            
            if (isListEveryField[j] == true){
                s+="[";
                ListCount = RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].Count;
                ss="";
                for (k=0; k<ListCount; k++){
                    if (RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].var[k].data > 999999){
                        SPrintf(sss,"%d,",RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].var[k].data);
                    }else{
                        SPrintf(sss,"%g,",RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].var[k].data);
                    }
                    ss+=sss;
                }
                ss = SubStr(ss,0,Strlen(ss)-1)+"]|";
            }
            else{
                    if (isStringEveryField[j] == true){
                        SPrintf(sss,"%s|",RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].data);
                        SPrintf(sss,StrDel(sss,Strstr(sss, "\r\n"),2));
                        SPrintf(sss,StrDel(sss,Strstr(sss, "\r"),2));
                        SPrintf(ss,StrDel(sss,Strstr(sss, "\n"),2));
                    }
                    else {
                        if (RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].data > 999999)
                            SPrintf(ss,"%d|",RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].data); // SlotNumListObjectCount // var[0]
                        else
                            SPrintf(ss,"%g|",RSZFile[0].Data.RawData.RSZ[DataItem_obj_idx].var[j].data);
                    }
                }
            s+=ss;
        }
        s = SubStr(s,0,Strlen(s)-1);
		Printf(s+"\n"); // object index
	}

}

ReadData();
//ReadslotData();